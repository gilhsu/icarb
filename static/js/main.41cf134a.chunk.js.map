{"version":3,"sources":["components/Home.js","components/containers/SubtotalContainer.js","components/Order.js","components/NotFound.js","components/Nav.js","components/Checkout.js","App.js","serviceWorker.js","modules/pizzas.js","store/rootReducer.js","index.js","store/configureStore.js"],"names":["Home","history","useHistory","className","Container","Button","onClick","push","SubtotalContainer","props","Order","Row","Col","md","NotFound","Nav","Navbar","expand","bg","variant","Brand","Image","src","style","height","width","viewBox","fill","xmlns","d","connect","state","pizzaList","pizzas","displayPizzas","map","pizza","key","id","name","App","store","component","path","exact","Checkout","Boolean","window","location","hostname","match","initialState","rootReducer","combineReducers","action","type","createStore","configureStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8QAwBeA,EApBF,WACX,IAAMC,EAAUC,cAKhB,OACE,yBAAKC,UAAU,QACb,kBAACC,EAAA,EAAD,KACE,yBAAKD,UAAU,wBAAf,eACA,yBAAKA,UAAU,kBAAf,sCACA,yBAAKA,UAAU,kBAAf,sBACA,kBAACE,EAAA,EAAD,CAAQF,UAAU,OAAOG,QAVT,WACpBL,EAAQM,KAAK,oBAST,gB,gBCVOC,EAJW,SAACC,GACzB,OAAO,8DCuBMC,EArBD,SAACD,GACb,IAAMR,EAAUC,cAIhB,OACE,kBAACE,EAAA,EAAD,KACE,kBAACO,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,EAAGV,UAAU,QAAtB,0BAGA,kBAACS,EAAA,EAAD,CAAKC,GAAI,GAAT,0BAEE,kBAAC,EAAD,MACA,kBAACR,EAAA,EAAD,CAAQC,QAZO,WACrBL,EAAQM,KAAK,qBAWP,gBCbKO,EAJE,WACf,OAAO,qC,gBCuCMC,EAtCH,WACV,IAAMd,EAAUC,cAMhB,OACE,kBAACc,EAAA,EAAD,CAAQC,OAAO,KAAKC,GAAG,OAAOC,QAAQ,QACpC,kBAACf,EAAA,EAAD,KACE,kBAACY,EAAA,EAAOI,MAAR,CACEd,QARc,WACpBL,EAAQM,KAAK,WAQPJ,UAAU,2DAEV,8BACE,kBAACkB,EAAA,EAAD,CACElB,UAAU,YACVmB,IAAI,mBACJC,MAAO,CAAEC,OAAQ,WAChB,IALL,SAQA,yBACErB,UAAU,iBACVsB,MAAM,MACND,OAAO,MACPE,QAAQ,YACRC,KAAK,eACLC,MAAM,8BAEN,0BAAMC,EAAE,oHCbLC,eANS,SAACC,GACvB,MAAO,CACLC,UAAWD,EAAME,OAAOD,aAIY,KAAzBF,EAjBE,SAACrB,GAChB,IAAMyB,EAAgBzB,EAAMuB,UAAUG,KAAI,SAACC,GACzC,OACE,yBAAKC,IAAKD,EAAME,IACbF,EAAME,GADT,IACcF,EAAMG,SAIxB,OAAO,kBAACnC,EAAA,EAAD,4BAAgC8B,MCc1BM,EAhBH,SAAC/B,GACX,OACE,kBAAC,IAAD,CAAUgC,MAAOhC,EAAMgC,OACrB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,UAAW3B,EAAK4B,KAAK,WAC5B,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOD,UAAW1C,EAAM4C,OAAK,EAACD,KAAK,WACnC,kBAAC,IAAD,CAAOD,UAAWhC,EAAOkC,OAAK,EAACD,KAAK,qBACpC,kBAAC,IAAD,CAAOD,UAAWG,EAAUD,OAAK,EAACD,KAAK,oBACvC,kBAAC,IAAD,CAAOD,UAAW5B,EAAU6B,KAAK,gBCPvBG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCZAC,EAAe,CACnBnB,UAAW,CACT,CAAEM,GAAI,EAAGC,KAAM,oBACf,CAAED,GAAI,EAAGC,KAAM,uBCDJa,EAJKC,YAAgB,CAClCpB,ODQa,WAAmC,IAAlCF,EAAiC,uDAAzBoB,EAAcG,EAAW,uCAG3C,OAFIA,EAAOC,KAEJxB,KETPU,ECJe,WAEnB,OADYe,YAAYJ,GDGZK,GAEdC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAKnB,MAAOA,KAEdoB,SAASC,eAAe,SHsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.41cf134a.chunk.js","sourcesContent":["import React from \"react\";\nimport { Container, Button } from \"react-bootstrap\";\nimport { useHistory } from \"react-router\";\n\nconst Home = () => {\n  const history = useHistory();\n  const handleToOrder = () => {\n    history.push(\"/icarb/pizza/1\");\n  };\n\n  return (\n    <div className=\"hero\">\n      <Container>\n        <div className=\"fs-1 fw-5 mt-5 mb-3 \">iCarb Pizza</div>\n        <div className=\"fs-3 fw-4 mt-2\">Because everyday can be cheat day.</div>\n        <div className=\"fs-3 fw-4 mt-2\">Starting at $11.50</div>\n        <Button className=\"mt-4\" onClick={handleToOrder}>\n          Order Now\n        </Button>\n      </Container>\n    </div>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\n\nconst SubtotalContainer = (props) => {\n  return <div>Hello from SubtotalContainer</div>;\n};\n\nexport default SubtotalContainer;\n","import React from \"react\";\nimport { Container, Row, Col, Button } from \"react-bootstrap\";\nimport { useHistory } from \"react-router\";\nimport SubtotalContainer from \"./containers/SubtotalContainer\";\n\nconst Order = (props) => {\n  const history = useHistory();\n  const handleContinue = () => {\n    history.push(\"/icarb/checkout\");\n  };\n  return (\n    <Container>\n      <Row>\n        <Col md={6} className=\"pr-3\">\n          Hello from left column\n        </Col>\n        <Col md={6}>\n          Hello from right column\n          <SubtotalContainer />\n          <Button onClick={handleContinue}>Continue</Button>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default Order;\n","import React from \"react\";\n\nconst NotFound = () => {\n  return <div>404</div>;\n};\n\nexport default NotFound;\n","import React from \"react\";\nimport { useHistory } from \"react-router\";\nimport { Navbar, Container, Image } from \"react-bootstrap\";\n\nconst Nav = () => {\n  const history = useHistory();\n\n  const handleHomeUrl = () => {\n    history.push(\"/icarb\");\n  };\n\n  return (\n    <Navbar expand=\"sm\" bg=\"dark\" variant=\"dark\">\n      <Container>\n        <Navbar.Brand\n          onClick={handleHomeUrl}\n          className=\"w-100 d-flex justify-content-between align-items-center\"\n        >\n          <span>\n            <Image\n              className=\"pr-2 pb-1\"\n              src=\"/icarb/pizza.svg\"\n              style={{ height: \"1.5em\" }}\n            />{\" \"}\n            iCarb\n          </span>\n          <svg\n            className=\"bi bi-bag-fill\"\n            width=\"1em\"\n            height=\"1em\"\n            viewBox=\"0 0 16 16\"\n            fill=\"currentColor\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path d=\"M1 4h14v10a2 2 0 01-2 2H3a2 2 0 01-2-2V4zm7-2.5A2.5 2.5 0 005.5 4h-1a3.5 3.5 0 117 0h-1A2.5 2.5 0 008 1.5z\" />\n          </svg>\n        </Navbar.Brand>\n      </Container>\n    </Navbar>\n  );\n};\n\nexport default Nav;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Container } from \"react-bootstrap\";\n\nconst Checkout = (props) => {\n  const displayPizzas = props.pizzaList.map((pizza) => {\n    return (\n      <div key={pizza.id}>\n        {pizza.id} {pizza.name}\n      </div>\n    );\n  });\n  return <Container>Hello from checkout!{displayPizzas}</Container>;\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    pizzaList: state.pizzas.pizzaList,\n  };\n};\n\nexport default connect(mapStateToProps, null)(Checkout);\n","import React from \"react\";\nimport \"./App.scss\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport Home from \"./components/Home\";\nimport Order from \"./components/Order\";\nimport NotFound from \"./components/NotFound\";\nimport Nav from \"./components/Nav\";\nimport Checkout from \"./components/Checkout\";\n\nconst App = (props) => {\n  return (\n    <Provider store={props.store}>\n      <Router>\n        <Route component={Nav} path=\"/icarb\" />\n        <Switch>\n          <Route component={Home} exact path=\"/icarb\" />\n          <Route component={Order} exact path=\"/icarb/pizza/:id\" />\n          <Route component={Checkout} exact path=\"/icarb/checkout\" />\n          <Route component={NotFound} path=\"/icarb/\" />\n        </Switch>\n      </Router>\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Action type constants\n\n// Action creators\n\n// Reducer and its initialState\n\nconst initialState = {\n  pizzaList: [\n    { id: 1, name: \"Delicious Pizza!\" },\n    { id: 2, name: \"Pepperoni Awesome\" },\n  ],\n};\n\nconst pizzas = (state = initialState, action) => {\n  switch (action.type) {\n    default:\n      return state;\n  }\n};\n\n// Export statement\n\nexport { pizzas };\n","import { combineReducers } from \"redux\";\n\nimport { pizzas } from \"../modules/pizzas\";\n\nconst rootReducer = combineReducers({\n  pizzas,\n});\n\nexport default rootReducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport configureStore from \"./store/configureStore\";\n\nconst store = configureStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App store={store} />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore } from \"redux\";\nimport rootReducer from \"./rootReducer\";\n\nlet configureStore = () => {\n  let store = createStore(rootReducer);\n  return store;\n};\n\nexport default configureStore;\n"],"sourceRoot":""}